
########################
cmakepp_lang.class/class
########################

.. module:: cmakepp_lang.class/class


.. function:: _cpp_class_guts(_cg_type _cg_wrapper)

   Creates the new class
   
   This function is factored out of ``cpp_class`` and contains the logic required
   to actually create the class. This logic is factored out primarily to avoid
   contaminating the caller's namespace with intermediate results.
   
   :param _cg_type: The name of the class being created.
   :type _cg_type: desc
   :param _cg_wrapper: Name for variable which will hold the path to the class's
                       implementation.
   :type _cg_wrapper: desc
   :param \*args: The base classes that this class derives from.
   :returns: ``_cg_wrapper`` will be set to the absolute file path for the
             generated module which implements the class.
   :rtype: path
   


.. function:: cpp_class(_c_type)


   .. note:: This is a macro, and so does not introduce a new scope.

   Creates a new class of the specified type.
   
   This command is used to start the declaration of a new user-defined type. The
   resulting user-defined type will automatically inherit from ``Object`` if no
   base classes are provided, otherwise it will inherit from the specified base
   classes (users of this command should never explicitly specify inheritance
   from ``Object``).
   
   :param _c_type: The name of the class whose declaration is being started.
   :type _c_type: desc
   :param \*args: The various base classes that the class should inherit from.
   
   .. note::
   
      This command is a macro to ensure that the functions generated by this
      command are in scope to the caller.
   
   Error Checking
   ==============
   
   If CMakePP is run in debug mode (and only if it is run in debug mode) this
   function will assert that it was called with at least one argument and that
   the arguments have the correct types.
   
   :var CMAKEPP_LANG_DEBUG_MODE: Used to determine if CMakePP is being run in
                                 debug mode or not.
   :vartype CMAKEPP_LANG_DEBUG_MODE: bool
   


.. function:: cpp_member(_m_name _m_type)

   Registers a class's member function.
   
   This function is used to declare a new member function.
   
   :param _m_name: The name of the member function. This is the name you will use
                   to invoke the member function.
   :type _m_name: desc
   :param _m_type: The class we are adding the member function to. This is also
                   the type of the "this" pointer.
   :type _m_type: class
   :param \*args: The types of the arguments to the member function. This list
                 should NOT include the type for the this pointer as this will
                 automatically be prepended to this list.
   :returns: ``_m_name`` will be set to the mangled name of the declared
              function to facilitate implementing it.
   :rtype: desc
   
   Error Checking
   ==============
   
   If CMakePP is run in debug mode (and only if) this function will assert that
   it is called with the correct number and types of arguments. If any of these
   assertions fail an error will be raised.
   
   :var CMAKEPP_LANG_DEBUG_MODE: Used to determine if CMakePP is being run in
                                 debug mode or not.
   :vartype CMAKEPP_LANG_DEBUG_MODE: bool
   


.. function:: cpp_virtual_member(_vm_fxn_name)


   .. note:: This is a macro, and so does not introduce a new scope.

   Registers a class's virtual member function.
   
   This function is used to declare a new virtual member function that has no
   concrete implementation and must be overridden by a derived class.
   
   :param _vm_fxn_name: The name of the virtual member function.
   :type _vm_fxn_name: desc
   


.. function:: "${${_vm_fxn_name}}"()

   


.. function:: cpp_constructor(_c_name _c_type)

   Registers a class constructor.
   
   This function is used to declare a class constructor.
   
   :param _c_name: The name of the constructor (CTOR by convention). This will be
                   the named used to invoke the member constructor.
   :type _c_name: desc
   :param _c_type: The class we are adding the constructor to.
   :type _c_type: class
   :param \*args: The types of the arguments to the constructor function.
   :returns: ``_c_name`` will be set to the mangled name of the declared
              constructor to facilitate implementing it.
   :rtype: desc
   
   Error Checking
   ==============
   
   If CMakePP is run in debug mode (and only if) this function will assert that
   it is called with the correct number and types of arguments. If any of these
   assertions fail an error will be raised.
   
   :var CMAKEPP_LANG_DEBUG_MODE: Used to determine if CMakePP is being run in
                                 debug mode or not.
   :vartype CMAKEPP_LANG_DEBUG_MODE: bool
   


.. function:: cpp_attr(_a_type _a_attr)

   Registers a class's attribute.
   
   This function is used to declare a new attribute for a class.
   
   :param _a_type: The name of the class getting the attribute.
   :type _a_type: class
   :param _a_attr: The name of the attribute
   :type _a_attr: desc
   :param \*args: The initial value of the attribute. If no ``*args`` are provided
                 the attribute will be initialized to the empty string.
   
   Error Checking
   ==============
   
   If CMakePP is run in debug mode (and only if) this function will assert that
   it is called with the correct number and types of arguments. If any of these
   assertions fail an error will be raised.
   
   :var CMAKEPP_LANG_DEBUG_MODE: Used to determine if CMakePP is being run in
                                 debug mode or not.
   :vartype CMAKEPP_LANG_DEBUG_MODE: bool
   


.. function:: cpp_end_class()


   .. note:: This is a macro, and so does not introduce a new scope.

   Denotes that we are done declaring a class.
   
   This function is a no-op that completes the fencing associated with declaring
   a class.
   
   Error Checking
   ==============
   
   None. This function is a no-op and has no errors to check for.
   

