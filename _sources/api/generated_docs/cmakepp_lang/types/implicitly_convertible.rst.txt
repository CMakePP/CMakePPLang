
#########################################
cmakepp_lang.types/implicitly_convertible
#########################################

.. module:: cmakepp_lang.types/implicitly_convertible


.. function:: cpp_implicitly_convertible(_ic_result _ic_from _ic_to)

   Determines if an object of a given type can be passed as a different type.
   
   CMakePP is a strongly-typed language with minimal implicit conversions. This
   function knows of all allowed implicit conversions and should be used to
   determine if it is okay to use one type in place of another.
   
   .. note::
   
      This function is used to implement ``cpp_assert_signature`` and thus can
      not rely on ``cpp_assert_signature`` for type-checking.
   
   :param _ic_result: Name to use for the variable which will hold the result.
   :type _ic_result: desc
   :param _ic_from: The type we are attempting to cast from.
   :type _ic_from: type
   :param _ic_to: The type we are attempting to cast to.
   :type _ic_to: type
   :returns: ``_ic_result`` will be set to ``TRUE`` if an instance of
             ``_ic_from`` can be implicitly converted to an instance of
             ``_ic_to`` and ``FALSE`` otherwise.
   :rtype: bool
   
   Error Checking
   ==============
   
   ``cpp_implicitly_convertible`` will assert that it is called with only three
   arguments, if this is not the case an error will be raised.
   

