
#########################################
cmakepp_lang/types/implicitly_convertible
#########################################

.. module:: cmakepp_lang/types/implicitly_convertible


.. function:: cpp_implicitly_convertible(result from to)

   Determines if an object of a given type can be passed as a different type.
   
   CMakePP is a strongly-typed language with minimal implicit conversions. This
   function knows of all allowed implicit conversions and should be used to
   determine if it is okay to use one type in place of another.
   
   .. note::
   
      This function is used to implement ``cpp_assert_signature`` and thus can
      not rely on ``cpp_assert_signature`` for type-checking.
   
   .. note::
      Pointer types are treated as being convertible to and from :code:`desc`.
      Pointer types are invariant currently, meaning one pointer type cannot
      be used in place of another, even if the base types would be convertible.
   
   :param result: Name to use for the variable which will hold the result.
   :type result: desc
   :param from: The type we are attempting to cast from.
   :type from: type
   :param to: The type we are attempting to cast to.
   :type to: type
   :returns: ``result`` will be set to ``TRUE`` if an instance of
             ``from`` can be implicitly converted to an instance of
             ``to`` and ``FALSE`` otherwise.
   :rtype: bool
   
   Error Checking
   ==============
   
   ``cpp_implicitly_convertible`` will assert that it is called with only three
   arguments, if this is not the case an error will be raised.
   

