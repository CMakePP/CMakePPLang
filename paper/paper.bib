@article{wirth_good_2006,
	title = {Good ideas, through the looking glass [computing history]},
	volume = {39},
	issn = {1558-0814},
	doi = {10.1109/MC.2006.20},
	abstract = {Computing's history has been driven by many good and original ideas, but a few turned out to be less brilliant than they first appeared. In many cases, changes in the technological environment reduced their importance. Often, commercial factors also influenced a good idea's importance. Some ideas simply turned out to be less effective and glorious when reviewed in retrospect or after proper analysis. Others were reincarnations of ideas invented earlier and then forgotten, perhaps because they were ahead of their time, perhaps because they had not exemplified current fashions and trends. And some ideas were reinvented, although they had already been found wanting in their first incarnation. Given that thorough self-critique is the hallmark of any subject claiming to be a science, computing science cannot help but benefit from a retrospective analysis and evaluation. This led author to the idea of collecting good ideas that looked less than brilliant in retrospect.},
	number = {1},
	journal = {Computer},
	author = {Wirth, N.},
	month = jan,
	year = {2006},
	note = {Conference Name: Computer},
	keywords = {Circuits, Computer aided manufacturing, Computer architecture, computer architectures, Computer errors, Digital arithmetic, Diodes, Glass, hardware technology, programming languages, programming paradigms, Silicon, Temperature distribution, Testing},
	pages = {28--39},
	annote = {This paper is referenced by Wikipedia in the following statement: “However, Niklaus Wirth (who popularized the adage now known as Wirth's law: "Software is getting slower more rapidly than hardware becomes faster") said of OOP in his paper, "Good Ideas through the Looking Glass", "This paradigm closely reflects the structure of systems 'in the real world', and it is therefore well suited to model complex systems with complex behaviours"[30] (contrast KISS principle).” - https://en.wikipedia.org/wiki/Object-oriented\_programming\#Real-world\_modeling\_and\_relationships.},
}

@incollection{pressman_142_2005,
	edition = {7},
	title = {{Software} {Quality}},
	isbn = {978-0-07-301933-8},
	language = {en},
	booktitle = {Software {Engineering}: {A} {Practitioner}'s {Approach}},
	publisher = {Palgrave Macmillan},
	collaborator = {Pressman, Roger S.},
	year = {2005},
	pages = {400--406},
}

@misc{ambler_realistic_1998,
	title = {A {Realistic} {Look} at {Object}-{Oriented} {Reuse}},
	url = {http://www.drdobbs.com/a-realistic-look-at-object-oriented-reus/184415594},
	abstract = {Software tools and techniques for global software development. Dr. Dobb's features articles, source code, blogs,forums,video tutorials, and audio podcasts, as well as articles from Dr. Dobb's Journal, BYTE.com, C/C++ Users Journal, and Software Development magazine.},
	urldate = {2023-06-12},
	journal = {Dr. Dobb's},
	author = {Ambler, Scott},
	month = jan,
	year = {1998},
	annote = {Wikipedia gives this as the reference for the key statement: “OOP was developed to increase the reusability and maintainability of source code.” - https://en.wikipedia.org/wiki/Object-oriented\_programming\#OOP\_and\_control\_flow. Scott Ambler is quite influential in software engineering: https://en.wikipedia.org/wiki/Scott\_Ambler.},
}

@misc{becker_cmake_2021,
	title = {{CMake}++},
	url = {https://github.com/toeb/cmakepp},
	abstract = {An Enhancement Suite for the CMake Build System},
	urldate = {2023-06-12},
	author = {Becker, Tobias and Hück, Alexander and Sánchez, Manu and Baratov, Ruslan and Loitsch, Florian and Remes, Juha},
	month = dec,
	year = {2021},
	note = {original-date: 2014-02-16T19:26:18Z},
}


@misc{cmakepp_org,
	title = {{CMakePP}},
	url = {https://github.com/CMakePP},
	abstract = {Dedicated to making packaging projects with CMake eaiser - CMakePP},
	language = {en},
	urldate = {2023-06-26},
	journal = {GitHub},
	file = {Snapshot:/mnt/2C627FE4627FB0E6/business/research/references/zotero/storage/X8FWCFRB/CMakePP.html:text/html},
}

@misc{cmaize,
	title = {{CMaize}},
	copyright = {Apache-2.0},
	url = {https://github.com/CMakePP/CMaize},
	abstract = {A C++ dependency manager written in CMake},
	urldate = {2023-06-26},
	publisher = {CMakePP},
	month = mar,
	year = {2022},
	note = {original-date: 2018-08-28T18:40:26Z},
	keywords = {cmake, cmake-best-practices},
}

@misc{cmaketest,
	title = {{CMakeTest}},
	copyright = {Apache-2.0},
	url = {https://github.com/CMakePP/CMakeTest},
	abstract = {A unit-testing framework for CMake functions},
	urldate = {2023-06-26},
	publisher = {CMakePP},
	month = jun,
	year = {2023},
	note = {original-date: 2019-05-04T15:42:37Z},
	keywords = {cmake, unit-testing},
}

@misc{cpp_stdmap_2023,
	title = {std::map},
	url = {https://cplusplus.com/reference/map/map/},
	abstract = {Maps are associative containers that store elements formed by a combination of a key value and a mapped value, following a specific order.},
	urldate = {2023-06-12},
	journal = {cplusplus.com},
	year = {2023},
}

@misc{python_map_2023,
	title = {Built-in {Types}: {Mapping} {Types} - dict},
	url = {https://docs.python.org/3/library/stdtypes.html#mapping-types-dict},
	abstract = {A mapping object maps hashable values to arbitrary objects. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary. (For other containers see the built-in list, set, and tuple classes, and the collections module.)},
	urldate = {2023-06-12},
	journal = {Python documentation},
	month = jun,
	year = {2023},
}

@misc{javascript_map_2023,
	title = {Map - {JavaScript}},
	url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map},
	abstract = {The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.},
	language = {en-US},
	journal = {JavaScript Reference},
	urldate = {2023-06-12},
	month = apr,
	year = {2023},
}

