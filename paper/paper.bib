@article{richard_pluginplay_2023,
	title = {{PluginPlay}: {Enabling} exascale scientific software one module at a time},
	volume = {158},
	issn = {0021-9606},
	shorttitle = {{PluginPlay}},
	url = {https://doi.org/10.1063/5.0147903},
	doi = {10.1063/5.0147903},
	abstract = {For many computational chemistry packages, being able to efficiently and effectively scale across an exascale cluster is a heroic feat. Collective experience from the Department of Energy’s Exascale Computing Project suggests that achieving exascale performance requires far more planning, design, and optimization than scaling to petascale. In many cases, entire rewrites of software are necessary to address fundamental algorithmic bottlenecks. This in turn requires a tremendous amount of resources and development time, resources that cannot reasonably be afforded by every computational science project. It thus becomes imperative that computational science transition to a more sustainable paradigm. Key to such a paradigm is modular software. While the importance of modular software is widely recognized, what is perhaps not so widely appreciated is the effort still required to leverage modular software in a sustainable manner. The present manuscript introduces PluginPlay, https://github.com/NWChemEx-Project/PluginPlay, an inversion-of-control framework designed to facilitate developing, maintaining, and sustaining modular scientific software packages. This manuscript focuses on the design aspects of PluginPlay and how they specifically influence the performance of the resulting package. Although, PluginPlay serves as the framework for the NWChemEx package, PluginPlay is not tied to NWChemEx or even computational chemistry. We thus anticipate PluginPlay to prove to be a generally useful tool for a number of computational science packages looking to transition to the exascale.},
	number = {18},
	urldate = {2023-06-07},
	journal = {The Journal of Chemical Physics},
	author = {Richard, Ryan M. and Keipert, Kristopher and Waldrop, Jonathan and Keçeli, Murat and Williams-Young, David and Bair, Raymond and Boschen, Jeffery and Crandall, Zachery and Gasperich, Kevin and Mahmud, Quazi Ishtiaque and Panyala, Ajay and Valeev, Edward and van Dam, Hubertus and de Jong, Wibe A. and Windus, Theresa L.},
	month = may,
	year = {2023},
	pages = {184801},
}

@article{wirth_good_2006,
	title = {Good ideas, through the looking glass [computing history]},
	volume = {39},
	issn = {1558-0814},
	doi = {10.1109/MC.2006.20},
	abstract = {Computing's history has been driven by many good and original ideas, but a few turned out to be less brilliant than they first appeared. In many cases, changes in the technological environment reduced their importance. Often, commercial factors also influenced a good idea's importance. Some ideas simply turned out to be less effective and glorious when reviewed in retrospect or after proper analysis. Others were reincarnations of ideas invented earlier and then forgotten, perhaps because they were ahead of their time, perhaps because they had not exemplified current fashions and trends. And some ideas were reinvented, although they had already been found wanting in their first incarnation. Given that thorough self-critique is the hallmark of any subject claiming to be a science, computing science cannot help but benefit from a retrospective analysis and evaluation. This led author to the idea of collecting good ideas that looked less than brilliant in retrospect.},
	number = {1},
	journal = {Computer},
	author = {Wirth, N.},
	month = jan,
	year = {2006},
	note = {Conference Name: Computer},
	keywords = {Circuits, Computer aided manufacturing, Computer architecture, computer architectures, Computer errors, Digital arithmetic, Diodes, Glass, hardware technology, programming languages, programming paradigms, Silicon, Temperature distribution, Testing},
	pages = {28--39},
	annote = {This paper is referenced by Wikipedia in the following statement: “However, Niklaus Wirth (who popularized the adage now known as Wirth's law: "Software is getting slower more rapidly than hardware becomes faster") said of OOP in his paper, "Good Ideas through the Looking Glass", "This paradigm closely reflects the structure of systems 'in the real world', and it is therefore well suited to model complex systems with complex behaviours"[30] (contrast KISS principle).” - https://en.wikipedia.org/wiki/Object-oriented\_programming\#Real-world\_modeling\_and\_relationships.},
}

@incollection{pressman_142_2005,
	edition = {7},
	title = {{Software} {Quality}},
	isbn = {978-0-07-301933-8},
	language = {en},
	booktitle = {Software {Engineering}: {A} {Practitioner}'s {Approach}},
	publisher = {Palgrave Macmillan},
	collaborator = {Pressman, Roger S.},
	year = {2005},
	pages = {400--406},
}

@misc{ambler_realistic_1998,
	title = {A {Realistic} {Look} at {Object}-{Oriented} {Reuse}},
	url = {http://www.drdobbs.com/a-realistic-look-at-object-oriented-reus/184415594},
	abstract = {Software tools and techniques for global software development. Dr. Dobb's features articles, source code, blogs,forums,video tutorials, and audio podcasts, as well as articles from Dr. Dobb's Journal, BYTE.com, C/C++ Users Journal, and Software Development magazine.},
	urldate = {2023-06-12},
	journal = {Dr. Dobb's},
	author = {Ambler, Scott},
	month = jan,
	year = {1998},
	annote = {Wikipedia gives this as the reference for the key statement: “OOP was developed to increase the reusability and maintainability of source code.” - https://en.wikipedia.org/wiki/Object-oriented\_programming\#OOP\_and\_control\_flow. Scott Ambler is quite influential in software engineering: https://en.wikipedia.org/wiki/Scott\_Ambler.},
}

@misc{becker_cmake_2021,
	title = {{CMake}++},
	url = {https://github.com/toeb/cmakepp},
	abstract = {An Enhancement Suite for the CMake Build System},
	urldate = {2023-06-12},
	author = {Becker, Tobias and Hück, Alexander and Sánchez, Manu and Baratov, Ruslan and Loitsch, Florian and Remes, Juha},
	month = dec,
	year = {2021},
	note = {original-date: 2014-02-16T19:26:18Z},
}

@misc{cmake,
	title = {{CMake}},
	url = {https://cmake.org/},
	year = {2023},
	language = {en-US},
	urldate = {2023-06-26},
}

@misc{cmake,
	title = {{CMake list(LENGTH}},
	url = {https://cmake.org/cmake/help/latest/command/list.html#length},
	year = {2023},
	language = {en-US},
	urldate = {2023-09-05},
}

@misc{cmakepp_org,
	title = {{CMakePP} {Organization}},
	url = {https://cmakepp.github.io/},
	abstract = {Website for CMake Packaging Project},
	year = {2023},
	language = {en-US},
	urldate = {2023-06-26},
	journal = {cmakepp.github.io},
}

@misc{cmaize,
	title = {{CMaize}},
	copyright = {Apache-2.0},
	url = {https://github.com/CMakePP/CMaize},
	abstract = {A C++ dependency manager written in CMake},
	urldate = {2023-06-26},
	publisher = {CMakePP},
	month = mar,
	year = {2022},
	note = {original-date: 2018-08-28T18:40:26Z},
	keywords = {cmake, cmake-best-practices},
}

@misc{cmaketest,
	title = {{CMakeTest}},
	copyright = {Apache-2.0},
	url = {https://github.com/CMakePP/CMakeTest},
	abstract = {A unit-testing framework for CMake functions},
	urldate = {2023-06-26},
	publisher = {CMakePP},
	month = jun,
	year = {2023},
	note = {original-date: 2019-05-04T15:42:37Z},
	keywords = {cmake, unit-testing},
}

@misc{cpp_stdmap_2023,
	title = {{std}{::}{map}},
	url = {https://cplusplus.com/reference/map/map/},
	abstract = {Maps are associative containers that store elements formed by a combination of a key value and a mapped value, following a specific order.},
	urldate = {2023-06-12},
	journal = {cplusplus.com},
	year = {2023},
}

@misc{python_map_2023,
	title = {Built-in {Types}: {Mapping} {Types} - dict},
	url = {https://docs.python.org/3/library/stdtypes.html#mapping-types-dict},
	abstract = {A mapping object maps hashable values to arbitrary objects. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary. (For other containers see the built-in list, set, and tuple classes, and the collections module.)},
	urldate = {2023-06-12},
	journal = {Python documentation},
	month = jun,
	year = {2023},
}

@misc{javascript_map_2023,
	title = {Map - {JavaScript}},
	url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map},
	abstract = {The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.},
	language = {en-US},
	journal = {JavaScript Reference},
	urldate = {2023-06-12},
	month = apr,
	year = {2023},
}

