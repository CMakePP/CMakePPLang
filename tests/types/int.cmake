include(cmake_test/cmake_test)

ct_add_test(NAME "test_cpp_is_int")
function("${test_cpp_is_int}")
    include(cmakepp_core/types/int)

    ct_add_section(NAME "Signature")
        cpp_is_int(return 1 hello)
        ct_assert_fails_as("cpp_is_int takes exactly 2 arguments.")
    endfunction()

    ct_add_section(NAME "bool")
        cpp_is_int(return TRUE)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "class")
        include(cmakepp_core/class/class)
        cpp_class(MyClass)

        cpp_is_int(return MyClass)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "command")
        cpp_is_int(return add_subdirectory)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "descriptions")
        ct_add_section(NAME "description w/o an integer")
            cpp_is_int(return "Hello World")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "description containing integers")
            cpp_is_int(return "Hello World 1")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "float")
        cpp_is_int(return 3.14)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "integer")
        ct_add_section(NAME "small positive")
            cpp_is_int(return 42)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME "small negative")
            cpp_is_int(return -42)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME "large positive")
            cpp_is_int(return 123456789)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME "large negative")
            cpp_is_int(return -123456789)
            ct_assert_equal(return TRUE)
        endfunction()
    endfunction()

    ct_add_section(NAME "list")
        ct_add_section(NAME "Normal list")
            cpp_is_int(return "hello;world")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "List of integers")
            cpp_is_int(return "1;2;3")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "map")
        include(cmakepp_core/map/map)
        cpp_map(CTOR a_map)
        cpp_is_int(result a_map)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME "obj")
        include(cmakepp_core/object/object)
        cpp_is_int(result "${__CMAKEPP_CORE_OBJECT_SINGLETON__}")
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME "path")
        ct_add_section(NAME "Normal path")
            cpp_is_int(return "${CMAKE_CURRENT_LIST_DIR}")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "Path with int in it")
            cpp_is_int(return "${CMAKE_CURRENT_LIST_DIR}/3")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "target")
        ct_add_section(NAME "normal target name")
            add_library(lib STATIC IMPORTED)
            cpp_is_int(return lib)
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "target with integer")
            add_library(lib1 STATIC IMPORTED)
            cpp_is_int(return lib1)
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "type")
        cpp_is_int(return bool)
        ct_assert_equal(return FALSE)
    endfunction()
endfunction()
