include(cmake_test/cmake_test)

ct_add_test(NAME [[test_cpp_is_type]])
function("${CMAKETEST_TEST}")
    include(cmakepp_lang/types/type)

    ct_add_section(NAME [[test_signature]] EXPECTFAIL)
    function("${CMAKETEST_SECTION}")
        cpp_is_type(return TRUE hello)
    endfunction()

    ct_add_section(NAME [[test_bool]])
    function("${CMAKETEST_SECTION}")
        cpp_is_type(return TRUE)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_class]])
    function("${CMAKETEST_SECTION}")
        include(cmakepp_lang/class/class)
        cpp_class(MyClass)

        cpp_is_type(return MyClass)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_command]])
    function("${CMAKETEST_SECTION}")
        cpp_is_type(return add_subdirectory)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_descriptions]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[description_without_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return "Hello World")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME [[description_contains_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return "bool Hello World")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[test_float]])
    function("${CMAKETEST_SECTION}")
        cpp_is_type(return 3.14)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_integer]])
    function("${CMAKETEST_SECTION}")
        cpp_is_type(return 42)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_list]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[normal_list]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return "hello;world")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME [[list_of_types]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return "int;bool")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[test_map]])
    function("${CMAKETEST_SECTION}")
        include(cmakepp_lang/map/map)
        cpp_map(CTOR a_map)
        cpp_is_type(result a_map)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[test_obj]])
    function("${CMAKETEST_SECTION}")
        include(cmakepp_lang/object/object)
        cpp_is_type(result "${__CMAKEPP_LANG_OBJECT_SINGLETON__}")
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[test_path]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[normal_filepath]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return "${CMAKE_CURRENT_LIST_DIR}")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME [[contains_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return "${CMAKE_CURRENT_LIST_DIR}/int")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[test_target]])
    function("${CMAKETEST_SECTION}")
        add_library(lib STATIC IMPORTED)
        cpp_is_type(return lib)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_type]])
    function("${CMAKETEST_SECTION}")

        ct_add_section(NAME [[test_type_bool]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return bool)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_class]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return class)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_desc]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return desc)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_float]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return float)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_fxn]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return fxn)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_genex]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return genex)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_int]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return int)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_list]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return list)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_map]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return map)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_obj]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return obj)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_path]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return path)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_str]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return str)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_target]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return target)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_type_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return type)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_bool_ptr_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return bool*)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_desc_ptr_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return desc*)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_desc_double_ptr_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return desc**)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_invalid_ptr_type]])
        function("${CMAKETEST_SECTION}")
            cpp_is_type(return invalid*)
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

endfunction()
