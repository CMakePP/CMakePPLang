include(cmake_test/cmake_test)

ct_add_test(NAME "test_cpp_type_of")
function("${test_cpp_type_of}")
    include(cmakepp_lang/types/type_of)

    ct_add_section(NAME "test_signature" EXPECTFAIL)
    function("${test_signature}")
        cpp_type_of(result TRUE hello)
    endfunction()

    ct_add_section(NAME "test_bool")
    function("${test_bool}")
        cpp_type_of(return TRUE)
        ct_assert_equal(return bool)
    endfunction()

    ct_add_section(NAME "test_bool_ptr")
    function("${test_bool_ptr}")
        set(bool_ptr TRUE)
        cpp_type_of(return bool_ptr)
        ct_assert_equal(return bool*)
    endfunction()

    ct_add_section(NAME "test_class")
    function("${test_class}")
        include(cmakepp_lang/class/class)
        cpp_class(a_class)
        cpp_type_of(return a_class)
        ct_assert_equal(return class)
    endfunction()

    ct_add_section(NAME "test_class_ptr")
    function("${test_class_ptr}")
        include(cmakepp_lang/class/class)
        cpp_class(a_class)
        set(class_ptr a_class)
        cpp_type_of(return class_ptr)
        ct_assert_equal(return class*)
    endfunction()

    ct_add_section(NAME "test_command")
    function("${test_command}")
        cpp_type_of(return add_subdirectory)
        ct_assert_equal(return fxn)
    endfunction()

    ct_add_section(NAME "test_command_ptr")
    function("${test_command_ptr}")
        set(command_ptr "add_subdirectory")
        cpp_type_of(return command_ptr)
        ct_assert_equal(return fxn*)
    endfunction()

    ct_add_section(NAME "test_desc")
    function("${test_desc}")
        cpp_type_of(return "hello world")
        ct_assert_equal(return desc)
    endfunction()

    ct_add_section(NAME "test_desc_ptr")
    function("${test_desc_ptr}")
        set(desc_ptr "hello world")
        cpp_type_of(return desc_ptr)
        ct_assert_equal(return desc*)
    endfunction()

    ct_add_section(NAME "empty_string")
    function("${empty_string}")
        cpp_type_of(return "")
        ct_assert_equal(return desc)
    endfunction()

    ct_add_section(NAME "empty_string_ptr")
    function("${empty_string_ptr}")
        set(str_ptr "")
        cpp_type_of(return str_ptr)
        ct_assert_equal(return desc*)
    endfunction()

    ct_add_section(NAME "test_float")
    function("${test_float}")
        cpp_type_of(return 3.14)
        ct_assert_equal(return float)
    endfunction()

    ct_add_section(NAME "test_float_ptr")
    function("${test_float_ptr}")
        set(float_ptr 3.14)
        cpp_type_of(return float_ptr)
        ct_assert_equal(return float*)
    endfunction()

    ct_add_section(NAME "test_int")
    function("${test_int}")
        cpp_type_of(return 42)
        ct_assert_equal(return int)
    endfunction()

    ct_add_section(NAME "test_int_ptr")
    function("${test_int_ptr}")
        set(int_ptr 42)
        cpp_type_of(return int_ptr)
        ct_assert_equal(return int*)
    endfunction()

    ct_add_section(NAME "test_list")
    function("${test_list}")
        cpp_type_of(return [[hello;world]])
        ct_assert_equal(return list)
    endfunction()

    ct_add_section(NAME "test_list_ptr")
    function("${test_list_ptr}")
        set(list_ptr hello world)
        cpp_type_of(return list_ptr)
        ct_assert_equal(return list*)
    endfunction()

    ct_add_section(NAME "test_map")
    function("${test_map}")
        include(cmakepp_lang/map/map)
        cpp_map(CTOR a_map)
        cpp_type_of(result "${a_map}")
        ct_assert_equal(result map)
    endfunction()

    ct_add_section(NAME "test_map_ptr")
    function("${test_map_ptr}")
        include(cmakepp_lang/map/map)
        cpp_map(CTOR a_map)
        cpp_type_of(result a_map)
        ct_assert_equal(result map*)
    endfunction()

    ct_add_section(NAME "test_obj")
    function("${test_obj}")
        include(cmakepp_lang/class/class)

        ct_add_section(NAME "obj_instance")
        function("${obj_instance}")
            cpp_type_of(return "${__CMAKEPP_LANG_OBJECT_SINGLETON__}")
            ct_assert_equal(return obj)
        endfunction()

        ct_add_section(NAME "obj_instance_ptr")
        function("${obj_instance_ptr}")
            set(obj_ptr "${__CMAKEPP_LANG_OBJECT_SINGLETON__}")
            cpp_type_of(return obj_ptr)
            ct_assert_equal(return obj*)
        endfunction()

        ct_add_section(NAME "user_defined_obj")
        function("${user_defined_obj}")
            cpp_class(MyClass)
            myclass(CTOR obj)
            cpp_type_of(return "${obj}")
            ct_assert_equal(return myclass)
        endfunction()

        ct_add_section(NAME "user_defined_obj_ptr")
        function("${user_defined_obj_ptr}")
            cpp_class(MyClass2)
            myclass2(CTOR obj2)
            cpp_type_of(return obj2)
            ct_assert_equal(return myclass2*)
        endfunction()
    endfunction()

    ct_add_section(NAME "test_path")
    function("${test_path}")
        cpp_type_of(return "${CMAKE_CURRENT_BINARY_DIR}")
        ct_assert_equal(return path)
    endfunction()

    ct_add_section(NAME "test_path_ptr")
    function("${test_path_ptr}")
        set(path_ptr "${CMAKE_CURRENT_BINARY_DIR}")
        cpp_type_of(return path_ptr)
        ct_assert_equal(return path*)
    endfunction()

    ct_add_section(NAME "test_target")
    function("${test_target}")
        add_library(lib STATIC IMPORTED)
        cpp_type_of(return lib)
        ct_assert_equal(return target)
    endfunction()

    ct_add_section(NAME "test_target_ptr")
    function("${test_target_ptr}")
        # Need to call it lib_2 because otherwise
        # it conflicts with the previously defined lib
        add_library(lib_2 STATIC IMPORTED)
        set(lib_ptr lib_2)
        cpp_type_of(return lib_ptr)
        ct_assert_equal(return target*)
    endfunction()

    ct_add_section(NAME "test_type")
    function("${test_type}")
        cpp_type_of(return bool)
        ct_assert_equal(return type)
    endfunction()

    ct_add_section(NAME "test_type_ptr")
    function("${test_type_ptr}")
        set(t_ptr bool)
        cpp_type_of(return t_ptr)
        ct_assert_equal(return type*)
    endfunction()

    ct_add_section(NAME "test_ptr_type")
    function("${test_ptr_type}")
        cpp_type_of(return bool*)
        ct_assert_equal(return type)
    endfunction()

endfunction()
