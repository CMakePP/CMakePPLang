include(cmake_test/cmake_test)

ct_add_test(NAME [[test__cpp_compare_names]])
function("${CMAKETEST_TEST}")
    include(cmakepp_lang/types/is_callable)

    set(sig0 a_fxn int bool)
    ct_add_section(NAME [[names_match]])
    function("${CMAKETEST_SECTION}")
        set(sig1 a_fxn bool int)
        _cpp_compare_names(result sig0 sig1)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[names_do_not_match]])
    function("${CMAKETEST_SECTION}")
        set(sig1 another_fxn bool int)
        _cpp_compare_names(result sig0 sig1)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[case_insens_compare]])
    function("${CMAKETEST_SECTION}")
        set(sig1 a_FXN bool int)
        _cpp_compare_names(result sig0 sig1)
        ct_assert_equal(result TRUE)
    endfunction()
endfunction()

ct_add_test(NAME [[test__cpp_compare_lengths]])
function("${CMAKETEST_TEST}")
    include(cmakepp_lang/types/is_callable)

    ct_add_section(NAME [[no_args]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[variadic_function]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn args)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[nonvariadic_one_arg]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_one_arg]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[variadic_one_arg]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int args)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_one_arg]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[nonvariadic_two_args]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int bool)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_one_arg]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_two_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool path)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[variadic_two_args]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int bool args)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_one_arg]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_two_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool path)
            _cpp_compare_lengths(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()
    endfunction()
endfunction()

ct_add_test(NAME [[test_cpp_is_callable]])
function("${CMAKETEST_TEST}")
    include(cmakepp_lang/types/is_callable)

    ct_add_section(NAME [[test_signature]])
    function("${CMAKETEST_SECTION}")
        set(CMAKEPP_LANG_DEBUG_MODE ON)

        ct_add_section(NAME [[first_arg_desc]] EXPECTFAIL)
        function("${CMAKETEST_SECTION}")
            cpp_is_callable(TRUE a_list b_list)
        endfunction()

        ct_add_section(NAME [[second_arg_desc]] EXPECTFAIL)
        function("${CMAKETEST_SECTION}")
            cpp_is_callable(result TRUE b_list)
        endfunction()

        ct_add_section(NAME [[third_arg_desc]] EXPECTFAIL)
        function("${CMAKETEST_SECTION}")
            cpp_is_callable(result a_list FALSE)
        endfunction()

        ct_add_section(NAME [[takes_three_args]] EXPECTFAIL)
        function("${CMAKETEST_SECTION}")
            cpp_is_callable(result a_list b_list hello)
        endfunction()
    endfunction()

    ct_add_section(NAME [[function_takes_no_args]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[variadic_function]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn args)

        ct_add_section(NAME [[trial_sig_no_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_more_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[nonvariadic_one_arg]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int)

        ct_add_section(NAME [[trial_sig_takes_same_arg]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_takes_diff_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn bool)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[variadic_one_arg]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int args)

        ct_add_section(NAME [[trial_sig_takes_same_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_same_first_plus_others]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_diff_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn bool)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[nonvariadic_two_args]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int bool)

        ct_add_section(NAME [[trial_sig_same_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_diff_first]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn bool bool)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_diff_second]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int int)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[variadic_two_args]])
    function("${CMAKETEST_SECTION}")
        set(sig0 a_fxn int bool args)

        ct_add_section(NAME [[trial_sig_same_args]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_same_args_plus_others]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int bool path)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[trial_sig_diff_first]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn bool bool)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()

        ct_add_section(NAME [[trial_sig_diff_second]])
        function("${CMAKETEST_SECTION}")
            set(sig1 a_fxn int int)
            cpp_is_callable(result sig0 sig1)
            ct_assert_equal(result FALSE)
        endfunction()
    endfunction()
endfunction()
