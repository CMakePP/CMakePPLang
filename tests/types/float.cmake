include(cmake_test/cmake_test)

ct_add_test(NAME [[test_cpp_is_float]])
function("${CMAKETEST_TEST}")
    include(cmakepp_lang/types/float)

    ct_add_section(NAME [[test_signature]] EXPECTFAIL)
    function("${CMAKETEST_SECTION}")
        cpp_is_float(return 3.14 hello)
    endfunction()

    ct_add_section(NAME [[test_bool]])
    function("${CMAKETEST_SECTION}")
        cpp_is_float(return TRUE)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_class]])
    function("${CMAKETEST_SECTION}")
        include(cmakepp_lang/class/class)
        cpp_class(MyClass)

        cpp_is_float(return MyClass)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_command]])
    function("${CMAKETEST_SECTION}")
        cpp_is_float(return add_subdirectory)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_descriptions]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[description_without_float]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return "Hello World")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME [[description_contains_float]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return "Hello World 3.14")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[test_float]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[test_positive]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return 3.14)
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME [[test_negative]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return -3.14)
            ct_assert_equal(return TRUE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[small_integer]])
    function("${CMAKETEST_SECTION}")
        cpp_is_float(return 42)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[big_integer]])
    function("${CMAKETEST_SECTION}")
        cpp_is_float(return 123456789)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME [[test_list]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[normal_list]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return "hello;world")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME [[list_of_floats]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return "1.23;2.34;3.45")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[test_map]])
    function("${CMAKETEST_SECTION}")
        include(cmakepp_lang/map/map)
        cpp_map(CTOR a_map)
        cpp_is_float(result a_map)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[test_obj]])
    function("${CMAKETEST_SECTION}")
        include(cmakepp_lang/object/object)
        cpp_is_float(result "${__CMAKEPP_LANG_OBJECT_SINGLETON__}")
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[test_path]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[normal_path]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return "${CMAKE_CURRENT_LIST_DIR}")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME [[path_containing_float]])
        function("${CMAKETEST_SECTION}")
            cpp_is_float(return "${CMAKE_CURRENT_LIST_DIR}/3.14")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[test_target]])
    function("${CMAKETEST_SECTION}")
        ct_add_section(NAME [[normal_target_name]])
        function("${CMAKETEST_SECTION}")
            add_library(lib STATIC IMPORTED)
            cpp_is_float(return lib)
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME [[target_with_float]])
        function("${CMAKETEST_SECTION}")
            add_library(lib3.14 STATIC IMPORTED)
            cpp_is_float(return lib1)
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[test_type]])
    function("${CMAKETEST_SECTION}")
        cpp_is_float(return bool)
        ct_assert_equal(return FALSE)
    endfunction()
endfunction()
