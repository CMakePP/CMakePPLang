include(cmake_test/cmake_test)

ct_add_test(NAME "test_cpp_is_path")
function("${test_cpp_is_path}")
    include(cmakepp_core/types/path)

    ct_add_section(NAME "Signature")
        cpp_is_path(return TRUE hello)
        ct_assert_fails_as("cpp_is_path takes exactly 2 arguments.")
    endfunction()

    ct_add_section(NAME "bool")
        cpp_is_path(return TRUE)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "class")
        include(cmakepp_core/class/class)
        cpp_class(MyClass)

        cpp_is_path(return MyClass)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "command")
        cpp_is_path(return add_subdirectory)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "description")
        ct_add_section(NAME "Empty description")
            cpp_is_path(return "")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "Normal description")
            cpp_is_path(return "Hello World")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "Description with a filepath in it")
            cpp_is_path(return "The path is: ${CMAKE_CURRENT_LIST_DIR}")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "float")
        cpp_is_path(return 3.14)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "integer")
        cpp_is_path(return 42)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "list")
        ct_add_section(NAME "Normal list")
            set(a_list 1 2 3)
            cpp_is_path(return "${a_list}")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "List of filepaths")
            set(a_list ${CMAKE_CURRENT_LIST_DIR} ${CMAKE_CURRENT_LIST_DIR})
            cpp_is_path(return "${a_list}")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "map")
        include(cmakepp_core/map/map)
        cpp_map(CTOR a_map)
        cpp_is_path(result a_map)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME "obj")
        include(cmakepp_core/object/object)
        cpp_is_path(result "${__CMAKEPP_CORE_OBJECT_SINGLETON__}")
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME "path")
        ct_add_section(NAME "absolute")
            cpp_is_path(return "${CMAKE_BINARY_DIR}")
            ct_assert_equal(return TRUE)
        endfunction()

        ct_add_section(NAME "relative")
            cpp_is_path(return "a/directory")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "target")
        add_library(lib STATIC IMPORTED)
        cpp_is_path(return lib)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "type")
        cpp_is_path(return bool)
        ct_assert_equal(return FALSE)
    endfunction()
endfunction()
