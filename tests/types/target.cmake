include(cmake_test/cmake_test)

ct_add_test(NAME "test_cpp_is_target")
function("${test_cpp_is_target}")
    include(cmakepp_core/types/target)

    ct_add_section(NAME "test_signature" EXPECTFAIL)
    function("${test_signature}")
        cpp_is_target(return TRUE hello)
    endfunction()

    ct_add_section(NAME "test_bool")
    function("${test_bool}")
        cpp_is_target(return TRUE)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "test_class")
    function("${test_class}")
        include(cmakepp_core/class/class)
        cpp_class(MyClass)

        cpp_is_target(return MyClass)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "test_command")
    function("${test_command}")
        cpp_is_target(return add_subdirectory)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "test_descriptions")
    function("${test_descriptions}")
        ct_add_section(NAME "description_without_target")
        function("${description_without_target}")
            cpp_is_target(return "Hello World")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "description_contains_target")
        function("${description_contains_target}")
            add_library(lib STATIC IMPORTED)
            cpp_is_target(return "lib Hello World")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "test_float")
    function("${test_float}")
        cpp_is_target(return 3.14)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "test_integer")
    function("${test_integer}")
        cpp_is_target(return 42)
        ct_assert_equal(return FALSE)
    endfunction()

    ct_add_section(NAME "test_list")
    function("${test_list}")
        ct_add_section(NAME "normal_list")
        function("${normal_list}")
            cpp_is_target(return "hello;world")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "list_of_targets")
        function("${list_of_targets}")
            add_library(lib1 STATIC IMPORTED)
            add_library(lib2 STATIC IMPORTED)
            cpp_is_target(return "lib1;lib2")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "test_map")
    function("${test_map}")
        include(cmakepp_core/map/map)
        cpp_map(CTOR a_map)
        cpp_is_target(result a_map)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME "test_obj")
    function("${test_obj}")
        include(cmakepp_core/object/object)
        cpp_is_target(result "${__CMAKEPP_CORE_OBJECT_SINGLETON__}")
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME "test_path")
    function("${test_path}")
        ct_add_section(NAME "normal_filepath")
        function("${normal_filepath}")
            cpp_is_target(return "${CMAKE_CURRENT_LIST_DIR}")
            ct_assert_equal(return FALSE)
        endfunction()

        ct_add_section(NAME "contains_target")
        function("${contains_target}")
            add_library(lib3 STATIC IMPORTED)
            cpp_is_target(return "${CMAKE_CURRENT_LIST_DIR}/lib3")
            ct_assert_equal(return FALSE)
        endfunction()
    endfunction()

    ct_add_section(NAME "test_target")
    function("${test_target}")
        add_library(lib4 STATIC IMPORTED)
        cpp_is_target(return lib4)
        ct_assert_equal(return TRUE)
    endfunction()

    ct_add_section(NAME "test_type")
    function("${test_type}")
        cpp_is_target(return bool)
        ct_assert_equal(return FALSE)
    endfunction()
endfunction()
