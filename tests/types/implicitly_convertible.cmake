include(cmake_test/cmake_test)

ct_add_test(NAME [[test_cpp_implicitly_convertible]])
function("${CMAKETEST_TEST}")
    include(cmakepp_lang/class/class)
    include(cmakepp_lang/map/map)
    include(cmakepp_lang/types/implicitly_convertible)

    ct_add_section(NAME [[test_signature]] EXPECTFAIL)
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool str hello)
    endfunction()

    ct_add_section(NAME [[user_defined_classes]])
    function("${CMAKETEST_SECTION}")

        cpp_class(Foo)

        ct_add_section(NAME [[foo_has_no_relatives]])
        function("${CMAKETEST_SECTION}")
            ct_add_section(NAME [[foo_converts_to_object]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result Foo obj)
                ct_assert_equal(result TRUE)
            endfunction()

            ct_add_section(NAME [[foo_not_related_to_bar]])
            function("${CMAKETEST_SECTION}")
                cpp_class(Bar)
                cpp_implicitly_convertible(result Foo Bar)
                ct_assert_equal(result FALSE)
            endfunction()
        endfunction()

        ct_add_section(NAME [[bar_derives_foo]])
        function("${CMAKETEST_SECTION}")
            cpp_class(Bar Foo)

            ct_add_section(NAME [[bar_converts_to_foo]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result Bar Foo)
                ct_assert_equal(result TRUE)
            endfunction()

            ct_add_section(NAME [[foo_does_not_convert_to_bar]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result Foo Bar)
                ct_assert_equal(result FALSE)
            endfunction()
        endfunction()

        ct_add_section(NAME [[c_derives_b_derives_a]])
        function("${CMAKETEST_SECTION}")
            cpp_class(A)
            cpp_class(B A)
            cpp_class(C B)

            ct_add_section(NAME [[c_converts_to_b]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result C B)
                ct_assert_equal(result TRUE)
            endfunction()

            ct_add_section(NAME [[c_converts_to_a]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result C A)
                ct_assert_equal(result TRUE)
            endfunction()

            ct_add_section(NAME [[b_converts_to_a]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result B A)
                ct_assert_equal(result TRUE)
            endfunction()

            ct_add_section(NAME [[a_does_not_convert_to_b]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result A B)
                ct_assert_equal(result FALSE)
            endfunction()

            ct_add_section(NAME [[a_does_not_convert_to_c]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result A C)
                ct_assert_equal(result FALSE)
            endfunction()
        endfunction()

        ct_add_section(NAME [[c_derives_a_b]])
        function("${CMAKETEST_SECTION}")
            cpp_class(A)
            cpp_class(B)
            cpp_class(C A B)

            ct_add_section(NAME [[c_converts_to_a]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result C A)
                ct_assert_equal(result TRUE)
            endfunction()

            ct_add_section(NAME [[c_converts_to_b]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result C B)
                ct_assert_equal(result TRUE)
            endfunction()

            ct_add_section(NAME [[a_does_not_convert_to_b]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result A B)
                ct_assert_equal(result FALSE)
            endfunction()

            ct_add_section(NAME [[a_does_not_convert_to_c]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result A C)
                ct_assert_equal(result FALSE)
            endfunction()

            ct_add_section(NAME [[b_does_not_convert_to_a]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result B A)
                ct_assert_equal(result FALSE)
            endfunction()

            ct_add_section(NAME [[b_does_not_convert_to_c]])
            function("${CMAKETEST_SECTION}")
                cpp_implicitly_convertible(result B C)
                ct_assert_equal(result FALSE)
            endfunction()
        endfunction()
    endfunction()

    ct_add_section(NAME [[same_type_okay]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool bool)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[everything_convert_str]])
    function("${CMAKETEST_SECTION}")

        ct_add_section(NAME [[test_bool]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result bool str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_class]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result class str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_float]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result float str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_fxn]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result fxn str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_int]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result int str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_list]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result list str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_map]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result map str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_object]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result obj str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_path]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result path str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_target]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result target str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_type]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result type str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[user_defined_type]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result foo_type str)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_ptr_type]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result desc* str)
            ct_assert_equal(result TRUE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[everything_convert_list]])
    function("${CMAKETEST_SECTION}")

        ct_add_section(NAME [[test_bool]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result bool list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_class]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result class list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_float]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result float list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_fxn]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result fxn list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_int]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result int list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_list]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result list list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_map]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result map list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_object]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result obj list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_path]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result path list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_target]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result target list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[test_type]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result type list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[user_defined_type]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result foo_list list)
            ct_assert_equal(result TRUE)
        endfunction()

        ct_add_section(NAME [[ptr_type]])
        function("${CMAKETEST_SECTION}")
            cpp_implicitly_convertible(result bool* list)
            ct_assert_equal(result TRUE)
        endfunction()
    endfunction()

    ct_add_section(NAME [[class_convert_type]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result class type)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[diff_builtins]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool double)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[pointer_to_desc]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool* desc)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[double_pointer_to_desc]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool** desc)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[pointer_to_pointer]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool* bool*)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[pointer_to_str_pointer]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool* str*)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[double_pointer_to_double_pointer]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool** bool**)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[double_pointer_to_desc_pointer]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool** desc*)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[desc_to_pointer]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result desc bool*)
        ct_assert_equal(result TRUE)
    endfunction()

    ct_add_section(NAME [[pointer_to_bool]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool* bool)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[double_pointer_to_pointer]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool** bool*)
        ct_assert_equal(result FALSE)
    endfunction()

    ct_add_section(NAME [[bool_to_pointer]])
    function("${CMAKETEST_SECTION}")
        cpp_implicitly_convertible(result bool bool*)
        ct_assert_equal(result FALSE)
    endfunction()
endfunction()
